#include <OneWire.h>
#include <DallasTemperature.h>
#include <EspMQTTClient.h>
#include <ArduinoJson.h>

#define PORTA_ANALOGICA 27
#define PINO_TRIG  4
#define PINO_ECHO  2
#define PINO_LED 5
#define oneWireBus 23   

OneWire oneWire(oneWireBus);
DallasTemperature sensors(&oneWire);

EspMQTTClient client(
  "HOT-SPOT-IOT", // Rede Wi-Fi
  "ilovecoxinha", // Senha Wi-Fi
  "mqtt.tago.io", // Broker MQTT
  "Default", // Usuário MQTT
  "b04c2dc2-804f-47ab-a877-869837f2ec65", // Token Tago.io
  "SA_IOT_2024" // Identificação única
);

float temperaturaAnterior = 0.0;
float distanciaAnterior = 0.0;
bool mudouValorSensores = false;
float analogValueAnterior = 0.0;

void setup() {
  Serial.begin(115200);
  sensors.begin();
  client.enableMQTTPersistence();
  client.setMqttReconnectionAttemptDelay(2000);
  client.setWifiReconnectionAttemptDelay(3000);
  client.setKeepAlive(20);
  client.enableDebuggingMessages(true);
  client.setMaxPacketSize(256);
  client.executeDelayed(5000, delayedFunction);
  pinMode(PINO_TRIG, OUTPUT);
  pinMode(PINO_ECHO, INPUT);
  pinMode(PINO_LED, OUTPUT);
  analogReadResolution(10);
}

void loop() {
  client.loop();
}

void delayedFunction() {
  DynamicJsonDocument dados(1024);
  DynamicJsonDocument tdados(1024);
  DynamicJsonDocument tadados(1024);
  String dadosJson;
  String tdadosJson;
  String tadadosJson;

  sensors.requestTemperatures(); 
  float temperatureC = sensors.getTempCByIndex(0);
  Serial.print(temperatureC);
  Serial.println("ºC");

  float distanciaAtual = medirDistancia();

  if (distanciaAtual <= 10 || distanciaAtual > 399 ) {
    digitalWrite(PINO_LED, HIGH);
  } else {
    digitalWrite(PINO_LED, LOW);
  }

  int analogValue=0.0;
  int i=0;
  int somaAnalogValue=0;
  for (i = 0; i < 100; i++) {
    analogValue = analogRead(PORTA_ANALOGICA);
    somaAnalogValue += analogValue;
  }

  analogValue = somaAnalogValue/100;
  Serial.print("Analog Value MEDIO (MEDIA DE 100 VALORES): ");
  Serial.println(analogValue);

  Serial.print("Estado da água: ");
  if (analogValue > 450) {
    Serial.println("LIMPA");
  }
  if ((analogValue > 250) && (analogValue < 450)) {
    Serial.println("UM POUCO SUJA");
  }
  if (analogValue <= 250) {
    Serial.println("MUITO SUJA");
  }

  if (distanciaAtual != distanciaAnterior || temperatureC != temperaturaAnterior || analogValue != analogValueAnterior) {
    int distanciaInt = int(distanciaAtual);
    char tempString[10];
    dtostrf(temperatureC, 5, 1, tempString);

    tdados[0]["variable"] = "valor_temperatura";
    tdados[0]["unit"] = "C";
    tdados[0]["value"] =  tempString;
    serializeJson(tdados, tdadosJson);
    client.publish("le_dados_temperatura", tdadosJson);

    dados[0]["variable"] = "valor_distancia";
    dados[0]["unit"] = "cm";
    dados[0]["value"] = distanciaInt;
    serializeJson(dados, dadosJson);
    client.publish("le_dados_qualidade_agua", dadosJson);

    tadados[0]["variable"] = "turbidez";
    tadados[0]["unit"] = "NTU";
    tadados[0]["value"] =  analogValue;
    serializeJson(tadados, tdadosJson);
    client.publish("le_dados_turbidez", tadadosJson);

    analogValueAnterior = analogValue;
    temperaturaAnterior = temperatureC;
    distanciaAnterior = distanciaAtual;
  }

  client.executeDelayed(5000, delayedFunction);
}

float medirDistancia() {
  digitalWrite(PINO_TRIG, LOW);
  delayMicroseconds(2);
  digitalWrite(PINO_TRIG, HIGH);
  delayMicroseconds(10);
  digitalWrite(PINO_TRIG, LOW);
  long duracao = pulseIn(PINO_ECHO, HIGH);
  return (duracao * 0.0343) / 2;
}

void onConnectionEstablished() {
  Serial.println("Conexao com tago.io estabelecida, assinando topicos...");
  Serial.println("Assinando o topico que atualiza os dados de qualidade da água.....");
  client.subscribe("le_dados_qualidade_agua", [] (const String &payload)  {});
}
